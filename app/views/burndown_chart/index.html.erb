<!DOCTYPE html>
<meta charset="utf-8">
<style>

body {
  font: 10px sans-serif;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.x.axis path {
  display: none;
}

.line {
    stroke: steelblue;
    fill: none;
    stroke-width: 1.5px;
}

.overlay {
    fill: none;
    pointer-events: all;
}

.focus circle {
    fill: none;
}

.focus circle.y0 {
    stroke: blue;
}

.focus line {
    stroke: purple;
    shape-rendering: crispEdges;
}

.focus line.y0 {
    stroke: steelblue;
    stroke-dasharray: 3 3;
    opacity: .5;
}

</style>
<body>
<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js"></script>
<script>

var burnUp_data = <%= @data.to_json.html_safe %>;

var margin = {top: 30, right: 150, bottom: 70, left: 50},
    width = 1000 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

var formatDate = d3.time.format("%Y-%m-%d"),
    parseDate = formatDate.parse,
    bisectDate = d3.bisector(function(d) { return d[0]; }).left,
    formatOutput0 = function(d) { return formatDate(d[0]) + " - Totally " + d[1] + " tasks completed"; };

burnUp_data.forEach(function(d) {
    d[0] = parseDate(d[0]);
    d[1] = +d[1];
});

var main_x = d3.time.scale()
        .range([0, width]);

var main_y0 = d3.scale.sqrt()
        .range([height, 0]);

var main_xAxis = d3.svg.axis()
        .scale(main_x)
        .tickFormat(d3.time.format("%Y-%m-%d"))
        .orient("bottom");

var main_yAxisLeft = d3.svg.axis()
        .scale(main_y0)
        .orient("left");

var main_line0 = d3.svg.line()
        .interpolate("cardinal")
        .x(function(d) { return main_x(d[0]); })
        .y(function(d) { return main_y0(d[1]); });

var svg = d3.select("body").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom);

svg.append("defs").append("clipPath")
        .attr("id", "clip")
        .append("rect")
        .attr("width", width)
        .attr("height", height);

var main = svg.append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

main_x.domain(d3.extent(burnUp_data, function(d) { return d[0]; }));
main_y0.domain(d3.extent(burnUp_data, function(d) { return d[1]; }));

main.append("path")
        .datum(burnUp_data)
        .attr("clip-path", "url(#clip)")
        .attr("class", "line line0")
        .attr("d", main_line0);

main.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(main_xAxis)
        .selectAll("text")
        .style("text-anchor", "end")
        .attr("dx", "-.8em")
        .attr("dy", ".15em")
        .attr("transform", "rotate(-65)" );;

main.append("g")
        .attr("class", "y axis axisLeft")
        .call(main_yAxisLeft)
        .append("text")
        .attr("transform", "rotate(-90)")
        .attr("y", 6)
        .attr("dy", ".71em")
        .style("text-anchor", "end")
        .text("# of Tasks Done");

var focus = main.append("g")
        .attr("class", "focus")
        .style("display", "none");

focus.append("line")
        .attr("class", "x")
        .attr("y1", main_y0(0) - 6);

focus.append("line")
        .attr("class", "y0")
        .attr("x1", width - 6)
        .attr("x2", width + 6);

focus.append("circle")
        .attr("class", "y0")
        .attr("r", 4);

focus.append("text")
        .attr("class", "y0")
        .attr("dy", "-1em");

main.append("rect")
        .attr("class", "overlay")
        .attr("width", width)
        .attr("height", height)
        .on("mouseover", function() { focus.style("display", null); })
        .on("mouseout", function() { focus.style("display", "none"); })
        .on("mousemove", mousemove);

function mousemove() {
    var x0 = main_x.invert(d3.mouse(this)[0]),
            i = bisectDate(burnUp_data, x0, 1),
            d0 = burnUp_data[i - 1],
            d1 = burnUp_data[i],
            d = x0 - d0.Uhrzeit > d1.Uhrzeit - x0 ? d1 : d0;
    focus.select("circle.y0").attr("transform", "translate(" + main_x(d[0]) + "," + main_y0(d[1]) + ")");
    focus.select("text.y0").attr("transform", "translate(" + main_x(d[0]) + "," + main_y0(d[1]) + ")").text(formatOutput0(d));
    focus.select(".x").attr("transform", "translate(" + main_x(d[0]) + ",0)");
    focus.select(".y0").attr("transform", "translate(" + width * -1 + ", " + main_y0(d[1]) + ")").attr("x2", width + main_x(d[0]));
}

</script>
